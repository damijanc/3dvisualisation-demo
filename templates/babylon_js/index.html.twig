{% extends 'base.html.twig' %}

{% block title %}Babylon.js example{% endblock %}

{% block stylesheets %}
    <style>
        .section {
            margin: 30px 0;
        }
        .viewer {
            width: 400px;
            height: 400px;
            margin-bottom: 10px;
        }
    </style>
{% endblock %}

{% block javascripts %}
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylon.glTF2FileLoader.js"></script>
{% endblock %}

{% block body %}
    <style>
    #babylon-viewer {
        width: 800px;
        height: 800px;
    }
</style>

    <h2>Babylon.js Example</h2>
    <canvas id="babylon-viewer"></canvas>
    <script>
        // Get the canvas element
        const canvas = document.getElementById('babylon-viewer');
        // Create Babylon engine
        const engine = new BABYLON.Engine(canvas, true);

        // Create scene
        const createScene = function () {
            const scene = new BABYLON.Scene(engine);
            scene.clearColor = new BABYLON.Color3(0.96, 0.96, 0.96); // light gray, like model-viewer

            // Camera: ArcRotateCamera behaves like OrbitControls
            const camera = new BABYLON.ArcRotateCamera("camera", Math.PI / 2, Math.PI / 2.5, 3, BABYLON.Vector3.Zero(), scene);
            camera.attachControl(canvas, true);
            camera.lowerBetaLimit = 0.7;
            camera.upperBetaLimit = Math.PI / 2.1;
            camera.wheelDeltaPercentage = 0.01;

            // Lighting
            const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
            light.intensity = 1.2;

            // Directional light for shadow
            const dirLight = new BABYLON.DirectionalLight("dirLight", new BABYLON.Vector3(-1, -2, -1), scene);
            dirLight.position = new BABYLON.Vector3(2, 4, 2);
            dirLight.intensity = 1.2;

            // Shadow generator
            const shadowGenerator = new BABYLON.ShadowGenerator(1024, dirLight);
            shadowGenerator.useBlurExponentialShadowMap = true;
            shadowGenerator.blurKernel = 32;

            // Shadow-catching ground
            const ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 5, height: 5}, scene);
            ground.position.y = -0.5;
            ground.receiveShadows = true;
            ground.visibility = 0.3;

            // Load GLB model
            BABYLON.SceneLoader.ImportMesh(
                null,
                "https://modelviewer.dev/shared-assets/models/",
                "Astronaut.glb",
                scene,
                function (meshes) {
                    meshes.forEach(mesh => {
                        mesh.position.y = 0;
                        mesh.receiveShadows = false;
                        mesh.castShadow = true;
                        shadowGenerator.addShadowCaster(mesh);
                    });
                }
            );

            return scene;
        };

        const scene = createScene();

        // Render loop
        engine.runRenderLoop(function () {
            scene.render();
        });

        // Resize
        window.addEventListener("resize", function () {
            engine.resize();
        });
    </script>
{% endblock %}
