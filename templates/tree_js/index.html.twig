{% extends 'base.html.twig' %}

{% block stylesheets %}
    <style>
        .section {
            margin: 30px 0;
        }
        .viewer {
            width: 400px;
            height: 400px;
            margin-bottom: 10px;
        }
    </style>
{% endblock %}

{% block javascripts %}
    <script type="importmap">
        {
          "imports": {
            "three": "https://cdn.jsdelivr.net/npm/three@0.177/build/three.module.js",
            "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.177.0/examples/jsm/"
          }
        }
    </script>

{% endblock %}

{% block title %}3D Demo Gallery{% endblock %}

{% block body %}

    <h1>3D Model Showcase (TreeJS, in Browser)</h1>

    <div class="section">
        <h2>Three.js Example</h2>
        <div id="threejs-viewer" class="viewer"></div>

        <script type="module">
            import * as THREE from 'three';
            import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
            import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

            const scene = new THREE.Scene();
            scene.background = new THREE.Color(0xf5f5f5); // very light gray

            const camera = new THREE.PerspectiveCamera(45, 1, 0.1, 100);
            camera.position.set(0, 1, 3);

            const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });
            renderer.setSize(400, 400);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            document.getElementById('threejs-viewer').appendChild(renderer.domElement);

            // Soft ambient light
            scene.add(new THREE.AmbientLight(0xffffff, 1.2));

            // Directional light for shadows
            const dirLight = new THREE.DirectionalLight(0xffffff, 1.2);
            dirLight.position.set(2, 4, 2);
            dirLight.castShadow = true;
            dirLight.shadow.mapSize.width = 1024;
            dirLight.shadow.mapSize.height = 1024;
            dirLight.shadow.camera.near = 1;
            dirLight.shadow.camera.far = 10;
            scene.add(dirLight);

            // Shadow-catching plane
            const planeGeo = new THREE.PlaneGeometry(5, 5);
            const planeMat = new THREE.ShadowMaterial({ opacity: 0.2 });
            const plane = new THREE.Mesh(planeGeo, planeMat);
            plane.rotation.x = -Math.PI / 2;
            plane.position.y = -0.5;
            plane.receiveShadow = true;
            scene.add(plane);

            // Orbit controls with limited tilt (like model-viewer)
            const controls = new OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.maxPolarAngle = Math.PI / 2.1; // prevents flipping under the model
            controls.minPolarAngle = Math.PI / 3;   // prevents looking from below
            controls.target.set(0, 0.7, 0);

            // Load model
            let model = null;
            const loader = new GLTFLoader();
            loader.load(
                'https://modelviewer.dev/shared-assets/models/Astronaut.glb',
                function (gltf) {
                    model = gltf.scene;
                    model.traverse((child) => {
                        if (child.isMesh) {
                            child.castShadow = true;
                            child.receiveShadow = false;
                        }
                    });
                    scene.add(model);
                    animate();
                }
            );

            function animate() {
                requestAnimationFrame(animate);
                controls.update();
                renderer.render(scene, camera);
            }
        </script>
    </div>
{% endblock %}
